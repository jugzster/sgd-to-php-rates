from datetime import datetime
import os

from dotenv import load_dotenv
from facebook_scraper import get_posts
from exceptions import FacebookPostNotFoundError
from exchange_rate import ExchangeRate

SOURCE = "IRemit Walk-in"
FEE = 4

load_dotenv()
user = os.getenv("FB_USER")
password = os.getenv("FB_PASSWORD")


def get_rate():
    """
    Scrape from Facebook. Get rate from image's description.
    Image description could be auto-generated by Facebook.
    """
    posts = get_posts("iremitsg", pages=20, credentials=(user, password))
    for post in posts:
        images_description = post["images_description"]
        timestamp: datetime = post["time"]

        if not images_description:
            continue

        description: str = images_description[0].upper()

        if "EXCHANGE RATE FOR TODAY" in description:
            text_to_parse = description.split("EXCHANGE RATE FOR TODAY", 1)[1]

            split = text_to_parse.split()
            iremitx_found = False
            i = 0
            length = len(split)
            while i < length:
                curr = split[i]

                # If: no "WALK-IN" e.g. "IREMITX 41.10 41.25" --> get 2nd rate
                # If: EXCHANGE RATE FOR TODAY Jan.19, 2023 IREMITX 41.25 41.22... [more text]... WALK-IN... --> get 2nd rate
                if curr == "IREMITX" or curr == "Ä°REMITX":
                    iremitx_found = True
                    i += 2
                    continue
                if is_decimal(curr) and iremitx_found:
                    return to_exchange_rate(curr, timestamp)

                # If: EXCHANGE RATE FOR TODAY Jan.18, 2023 IREMITX 41.29 WALK-IN 41.35 --> get 2nd rate
                if is_walkin(curr) and i + 1 < length:
                    next_token = split[i + 1]
                    if is_decimal(next_token):
                        return to_exchange_rate(next_token, timestamp)
                    break

                i += 1
    raise FacebookPostNotFoundError("Error getting IRemit Walk-in rate from Facebook")


def is_decimal(string: str) -> bool:
    return string.replace(".", "", 1).isdigit()


def is_walkin(string: str) -> bool:
    return string.replace("-", "").upper() == "WALKIN"


def to_exchange_rate(string: str, timestamp: datetime) -> ExchangeRate:
    return ExchangeRate(
        effective_on=timestamp,
        source=SOURCE,
        rate=string,
        fee=FEE,
        updated_on=datetime.now(),
    )


def main():
    rate = get_rate()
    print(rate)


if __name__ == "__main__":
    main()
